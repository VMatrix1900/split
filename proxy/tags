!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC_VERSION_KHASH_H	khash.h	126;"	d
ATTRIB_H	attrib.h	30;"	d
BINDIR	makefile	/^BINDIR := ..\/bin$/;"	m
BUFSZ	shm_and_sem.h	6;"	d
BUILDDIR	makefile	/^BUILDDIR := ..\/build$/;"	m
CACHEDSESS_H	cachedsess.h	30;"	d
CACHEFKCRT_H	cachefkcrt.h	30;"	d
CACHEMGR_H	cachemgr.h	30;"	d
CACHESSESS_H	cachessess.h	30;"	d
CACHETGCRT_H	cachetgcrt.h	30;"	d
CACHE_H	cache.h	30;"	d
CC	makefile	/^CC := gcc$/;"	m
CERTF	SSL_layer.c	21;"	d	file:
CERT_H	cert.h	30;"	d
CFLAGS	makefile	/^CFLAGS := -g -Wall -std=c99 -D DEBUG_SNI_PARSER$/;"	m
CHK_ERR	SSL_layer.c	15;"	d	file:
CHK_NULL	SSL_layer.c	14;"	d	file:
CHK_SSL	SSL_layer.c	16;"	d	file:
CONST_SSL_METHOD	ssl.h	67;"	d
CONST_SSL_METHOD	ssl.h	69;"	d
CRYPTO_dynlock_value	ssl.c	/^struct CRYPTO_dynlock_value {$/;"	s	file:
DBG_printf	ssl.c	1601;"	d	file:
DOWN_SEM	shm_and_sem.h	/^char DOWN_SEM[]= "down";$/;"	v
DYNBUF_H	dynbuf.h	30;"	d
HOME	SSL_layer.c	19;"	d	file:
KEYF	SSL_layer.c	22;"	d	file:
KHASH_DECLARE	khash.h	349;"	d
KHASH_INIT	khash.h	357;"	d
KHASH_INIT2	khash.h	353;"	d
KHASH_MAP_INIT_INT	khash.h	585;"	d
KHASH_MAP_INIT_INT64	khash.h	600;"	d
KHASH_MAP_INIT_STR	khash.h	616;"	d
KHASH_SET_INIT_INT	khash.h	577;"	d
KHASH_SET_INIT_INT64	khash.h	592;"	d
KHASH_SET_INIT_STR	khash.h	608;"	d
LOCK_SEM	shm_and_sem.h	/^char LOCK_SEM[]= "lock";$/;"	v
LOG_DBG_MODE_ERRLOG	log.h	45;"	d
LOG_DBG_MODE_NONE	log.h	44;"	d
LOG_ERR_MODE_STDERR	log.h	37;"	d
LOG_ERR_MODE_SYSLOG	log.h	38;"	d
LOG_H	log.h	30;"	d
MALLOC	attrib.h	54;"	d
MAXCONNS	constants.h	1;"	d
MAYBE_UNUSED	SSL_layer.c	180;"	d	file:
MAYBE_UNUSED	SSL_layer.c	182;"	d	file:
MAYBE_UNUSED	SSL_layer.c	186;"	d	file:
NONNULL	attrib.h	55;"	d
NORET	attrib.h	50;"	d
OBJS	makefile	/^OBJS := $(SRCS:.c=.o)$/;"	m
OPENSSL_NO_EC	ssl.h	59;"	d
OPENSSL_NO_ECDH	ssl.h	53;"	d
OPENSSL_NO_ECDSA	ssl.h	56;"	d
OPENSSL_NO_THREADID	ssl.h	47;"	d
OPENSSL_NO_TLSEXT	ssl.h	50;"	d
PRINTF	attrib.h	51;"	d
PURE	attrib.h	56;"	d
SCANF	attrib.h	52;"	d
SHMSZ	shm_and_sem.h	5;"	d
SNI_parsed	SSL_layer.h	/^    bool SNI_parsed;$/;"	m	struct:proxy
SRCS	makefile	/^SRCS := $(wildcard *.c)$/;"	m
SSL2_S	ssl.h	85;"	d
SSL2_S	ssl.h	87;"	d
SSL3_S	ssl.h	90;"	d
SSL3_S	ssl.h	92;"	d
SSL_EC_KEY_CURVE_DEFAULT	ssl.h	125;"	d
SSL_H	ssl.h	30;"	d
SSL_OBJS	makefile	/^SSL_OBJS := $(filter-out TCP_layer.o, $(OBJS))$/;"	m
SSL_PROTO_SUPPORT_S	ssl.h	109;"	d
SSL_X509_FPRSZ	ssl.h	143;"	d
SSL_get_certificate	ssl.h	80;"	d
TLS10_S	ssl.h	95;"	d
TLS10_S	ssl.h	97;"	d
TLS11_S	ssl.h	100;"	d
TLS11_S	ssl.h	102;"	d
TLS12_S	ssl.h	105;"	d
TLS12_S	ssl.h	107;"	d
UNUSED	attrib.h	49;"	d
UP_SEM	shm_and_sem.h	/^char UP_SEM[]= "up";$/;"	v
WUNRES	attrib.h	53;"	d
__AC_KHASH_H	khash.h	118;"	d
__KHASH_IMPL	khash.h	203;"	d
__KHASH_PROTOTYPES	khash.h	194;"	d
__KHASH_TYPE	khash.h	186;"	d
__ac_HASH_UPPER	khash.h	/^static const double __ac_HASH_UPPER = 0.77;$/;"	v
__ac_Wang_hash	khash.h	/^static kh_inline khint_t __ac_Wang_hash(khint_t key)$/;"	f
__ac_X31_hash_string	khash.h	/^static kh_inline khint_t __ac_X31_hash_string(const char *s)$/;"	f
__ac_fsize	khash.h	165;"	d
__ac_isdel	khash.h	158;"	d
__ac_iseither	khash.h	159;"	d
__ac_isempty	khash.h	157;"	d
__ac_set_isboth_false	khash.h	162;"	d
__ac_set_isdel_false	khash.h	160;"	d
__ac_set_isdel_true	khash.h	163;"	d
__ac_set_isempty_false	khash.h	161;"	d
__attribute__	attrib.h	46;"	d
accept_conn_cb	TCP_layer.c	/^accept_conn_cb(struct evconnlistener *listener,$/;"	f
base	TCP_layer.h	/^    struct event_base *base;$/;"	m	struct:proxy_ctx	typeref:struct:proxy_ctx::event_base
begin_cb	cache.h	/^	cache_begin_cb_t begin_cb;$/;"	m	struct:cache
buf	dynbuf.h	/^	unsigned char *buf;$/;"	m	struct:dynbuf
cache	cache.h	/^typedef struct cache {$/;"	s
cache_begin_cb_t	cache.h	/^typedef cache_iter_t (*cache_begin_cb_t)(void);$/;"	t
cache_del	cache.c	/^cache_del(cache_t *cache, cache_key_t key)$/;"	f
cache_del_cb_t	cache.h	/^typedef void (*cache_del_cb_t)(cache_iter_t);$/;"	t
cache_end_cb_t	cache.h	/^typedef cache_iter_t (*cache_end_cb_t)(void);$/;"	t
cache_exist_cb_t	cache.h	/^typedef int (*cache_exist_cb_t)(cache_iter_t);$/;"	t
cache_fini_cb_t	cache.h	/^typedef void (*cache_fini_cb_t)(void);$/;"	t
cache_free	cache.c	/^cache_free(cache_t *cache)$/;"	f
cache_free_key_cb_t	cache.h	/^typedef void (*cache_free_key_cb_t)(cache_key_t);$/;"	t
cache_free_val_cb_t	cache.h	/^typedef void (*cache_free_val_cb_t)(cache_val_t);$/;"	t
cache_gc	cache.c	/^cache_gc(cache_t *cache)$/;"	f
cache_get	cache.c	/^cache_get(cache_t *cache, cache_key_t key)$/;"	f
cache_get_cb_t	cache.h	/^typedef cache_iter_t (*cache_get_cb_t)(cache_key_t);$/;"	t
cache_get_key_cb_t	cache.h	/^typedef cache_key_t (*cache_get_key_cb_t)(cache_iter_t);$/;"	t
cache_get_val_cb_t	cache.h	/^typedef cache_val_t (*cache_get_val_cb_t)(cache_iter_t);$/;"	t
cache_init_cb_t	cache.h	/^typedef void (*cache_init_cb_t)(struct cache *);$/;"	t
cache_iter_t	cache.h	/^typedef unsigned int cache_iter_t; \/* must match khiter_t *\/$/;"	t
cache_key_t	cache.h	/^typedef void * cache_key_t;$/;"	t
cache_new	cache.c	/^cache_new(cache_init_cb_t init_cb)$/;"	f
cache_put_cb_t	cache.h	/^typedef cache_iter_t (*cache_put_cb_t)(cache_key_t, int *);$/;"	t
cache_reinit	cache.c	/^cache_reinit(cache_t *cache)$/;"	f
cache_set	cache.c	/^cache_set(cache_t *cache, cache_key_t key, cache_val_t val)$/;"	f
cache_set_val_cb_t	cache.h	/^typedef void (*cache_set_val_cb_t)(cache_iter_t, cache_val_t);$/;"	t
cache_t	cache.h	/^} cache_t;$/;"	t	typeref:struct:cache
cache_unpackverify_val_cb_t	cache.h	/^typedef cache_val_t (*cache_unpackverify_val_cb_t)(cache_val_t, int);$/;"	t
cache_val_t	cache.h	/^typedef void * cache_val_t;$/;"	t
cachedsess_begin_cb	cachedsess.c	/^cachedsess_begin_cb(void)$/;"	f	file:
cachedsess_del_cb	cachedsess.c	/^cachedsess_del_cb(cache_iter_t it)$/;"	f	file:
cachedsess_end_cb	cachedsess.c	/^cachedsess_end_cb(void)$/;"	f	file:
cachedsess_exist_cb	cachedsess.c	/^cachedsess_exist_cb(cache_iter_t it)$/;"	f	file:
cachedsess_fini_cb	cachedsess.c	/^cachedsess_fini_cb(void)$/;"	f	file:
cachedsess_free_key_cb	cachedsess.c	/^cachedsess_free_key_cb(cache_key_t key)$/;"	f	file:
cachedsess_free_val_cb	cachedsess.c	/^cachedsess_free_val_cb(cache_val_t val)$/;"	f	file:
cachedsess_get_cb	cachedsess.c	/^cachedsess_get_cb(cache_key_t key)$/;"	f	file:
cachedsess_get_key_cb	cachedsess.c	/^cachedsess_get_key_cb(cache_iter_t it)$/;"	f	file:
cachedsess_get_val_cb	cachedsess.c	/^cachedsess_get_val_cb(cache_iter_t it)$/;"	f	file:
cachedsess_init_cb	cachedsess.c	/^cachedsess_init_cb(cache_t *cache)$/;"	f
cachedsess_mkkey	cachedsess.c	/^cachedsess_mkkey(const struct sockaddr *addr, UNUSED const socklen_t addrlen,$/;"	f
cachedsess_mkval	cachedsess.c	/^cachedsess_mkval(SSL_SESSION *sess)$/;"	f
cachedsess_put_cb	cachedsess.c	/^cachedsess_put_cb(cache_key_t key, int *ret)$/;"	f	file:
cachedsess_set_val_cb	cachedsess.c	/^cachedsess_set_val_cb(cache_iter_t it, cache_val_t val)$/;"	f	file:
cachedsess_unpackverify_val_cb	cachedsess.c	/^cachedsess_unpackverify_val_cb(cache_val_t val, int copy)$/;"	f	file:
cachefkcrt_begin_cb	cachefkcrt.c	/^cachefkcrt_begin_cb(void)$/;"	f	file:
cachefkcrt_del_cb	cachefkcrt.c	/^cachefkcrt_del_cb(cache_iter_t it)$/;"	f	file:
cachefkcrt_end_cb	cachefkcrt.c	/^cachefkcrt_end_cb(void)$/;"	f	file:
cachefkcrt_exist_cb	cachefkcrt.c	/^cachefkcrt_exist_cb(cache_iter_t it)$/;"	f	file:
cachefkcrt_fini_cb	cachefkcrt.c	/^cachefkcrt_fini_cb(void)$/;"	f	file:
cachefkcrt_free_key_cb	cachefkcrt.c	/^cachefkcrt_free_key_cb(cache_key_t key)$/;"	f	file:
cachefkcrt_free_val_cb	cachefkcrt.c	/^cachefkcrt_free_val_cb(cache_val_t val)$/;"	f	file:
cachefkcrt_get_cb	cachefkcrt.c	/^cachefkcrt_get_cb(cache_key_t key)$/;"	f	file:
cachefkcrt_get_key_cb	cachefkcrt.c	/^cachefkcrt_get_key_cb(cache_iter_t it)$/;"	f	file:
cachefkcrt_get_val_cb	cachefkcrt.c	/^cachefkcrt_get_val_cb(cache_iter_t it)$/;"	f	file:
cachefkcrt_init_cb	cachefkcrt.c	/^cachefkcrt_init_cb(cache_t *cache)$/;"	f
cachefkcrt_mkkey	cachefkcrt.c	/^cachefkcrt_mkkey(X509 *keycrt)$/;"	f
cachefkcrt_mkval	cachefkcrt.c	/^cachefkcrt_mkval(X509 *valcrt)$/;"	f
cachefkcrt_put_cb	cachefkcrt.c	/^cachefkcrt_put_cb(cache_key_t key, int *ret)$/;"	f	file:
cachefkcrt_set_val_cb	cachefkcrt.c	/^cachefkcrt_set_val_cb(cache_iter_t it, cache_val_t val)$/;"	f	file:
cachefkcrt_unpackverify_val_cb	cachefkcrt.c	/^cachefkcrt_unpackverify_val_cb(cache_val_t val, int copy)$/;"	f	file:
cachemgr_dsess	cachemgr.c	/^cache_t *cachemgr_dsess;$/;"	v
cachemgr_dsess_del	cachemgr.h	79;"	d
cachemgr_dsess_get	cachemgr.h	74;"	d
cachemgr_dsess_set	cachemgr.h	76;"	d
cachemgr_fini	cachemgr.c	/^cachemgr_fini(void)$/;"	f
cachemgr_fkcrt	cachemgr.c	/^cache_t *cachemgr_fkcrt;$/;"	v
cachemgr_fkcrt_del	cachemgr.h	52;"	d
cachemgr_fkcrt_get	cachemgr.h	48;"	d
cachemgr_fkcrt_set	cachemgr.h	50;"	d
cachemgr_gc	cachemgr.c	/^cachemgr_gc(void)$/;"	f
cachemgr_gc_thread	cachemgr.c	/^cachemgr_gc_thread(UNUSED void * arg)$/;"	f	file:
cachemgr_init	cachemgr.c	/^cachemgr_init(void)$/;"	f
cachemgr_preinit	cachemgr.c	/^cachemgr_preinit(void)$/;"	f
cachemgr_ssess	cachemgr.c	/^cache_t *cachemgr_ssess;$/;"	v
cachemgr_ssess_del	cachemgr.h	69;"	d
cachemgr_ssess_get	cachemgr.h	62;"	d
cachemgr_ssess_set	cachemgr.h	64;"	d
cachemgr_tgcrt	cachemgr.c	/^cache_t *cachemgr_tgcrt;$/;"	v
cachemgr_tgcrt_del	cachemgr.h	59;"	d
cachemgr_tgcrt_get	cachemgr.h	55;"	d
cachemgr_tgcrt_set	cachemgr.h	57;"	d
cachessess_begin_cb	cachessess.c	/^cachessess_begin_cb(void)$/;"	f	file:
cachessess_del_cb	cachessess.c	/^cachessess_del_cb(cache_iter_t it)$/;"	f	file:
cachessess_end_cb	cachessess.c	/^cachessess_end_cb(void)$/;"	f	file:
cachessess_exist_cb	cachessess.c	/^cachessess_exist_cb(cache_iter_t it)$/;"	f	file:
cachessess_fini_cb	cachessess.c	/^cachessess_fini_cb(void)$/;"	f	file:
cachessess_free_key_cb	cachessess.c	/^cachessess_free_key_cb(cache_key_t key)$/;"	f	file:
cachessess_free_val_cb	cachessess.c	/^cachessess_free_val_cb(cache_val_t val)$/;"	f	file:
cachessess_get_cb	cachessess.c	/^cachessess_get_cb(cache_key_t key)$/;"	f	file:
cachessess_get_key_cb	cachessess.c	/^cachessess_get_key_cb(cache_iter_t it)$/;"	f	file:
cachessess_get_val_cb	cachessess.c	/^cachessess_get_val_cb(cache_iter_t it)$/;"	f	file:
cachessess_init_cb	cachessess.c	/^cachessess_init_cb(cache_t *cache)$/;"	f
cachessess_mkkey	cachessess.c	/^cachessess_mkkey(const unsigned char *id, const size_t idlen)$/;"	f
cachessess_mkval	cachessess.c	/^cachessess_mkval(SSL_SESSION *sess)$/;"	f
cachessess_put_cb	cachessess.c	/^cachessess_put_cb(cache_key_t key, int *ret)$/;"	f	file:
cachessess_set_val_cb	cachessess.c	/^cachessess_set_val_cb(cache_iter_t it, cache_val_t val)$/;"	f	file:
cachessess_unpackverify_val_cb	cachessess.c	/^cachessess_unpackverify_val_cb(cache_val_t val, int copy)$/;"	f	file:
cachetgcrt_begin_cb	cachetgcrt.c	/^cachetgcrt_begin_cb(void)$/;"	f	file:
cachetgcrt_del_cb	cachetgcrt.c	/^cachetgcrt_del_cb(cache_iter_t it)$/;"	f	file:
cachetgcrt_end_cb	cachetgcrt.c	/^cachetgcrt_end_cb(void)$/;"	f	file:
cachetgcrt_exist_cb	cachetgcrt.c	/^cachetgcrt_exist_cb(cache_iter_t it)$/;"	f	file:
cachetgcrt_fini_cb	cachetgcrt.c	/^cachetgcrt_fini_cb(void)$/;"	f	file:
cachetgcrt_free_key_cb	cachetgcrt.c	/^cachetgcrt_free_key_cb(cache_key_t key)$/;"	f	file:
cachetgcrt_free_val_cb	cachetgcrt.c	/^cachetgcrt_free_val_cb(cache_val_t val)$/;"	f	file:
cachetgcrt_get_cb	cachetgcrt.c	/^cachetgcrt_get_cb(cache_key_t key)$/;"	f	file:
cachetgcrt_get_key_cb	cachetgcrt.c	/^cachetgcrt_get_key_cb(cache_iter_t it)$/;"	f	file:
cachetgcrt_get_val_cb	cachetgcrt.c	/^cachetgcrt_get_val_cb(cache_iter_t it)$/;"	f	file:
cachetgcrt_init_cb	cachetgcrt.c	/^cachetgcrt_init_cb(cache_t *cache)$/;"	f
cachetgcrt_mkkey	cachetgcrt.c	/^cachetgcrt_mkkey(const char *keycn)$/;"	f
cachetgcrt_mkval	cachetgcrt.c	/^cachetgcrt_mkval(cert_t *valcrt)$/;"	f
cachetgcrt_put_cb	cachetgcrt.c	/^cachetgcrt_put_cb(cache_key_t key, int *ret)$/;"	f	file:
cachetgcrt_set_val_cb	cachetgcrt.c	/^cachetgcrt_set_val_cb(cache_iter_t it, cache_val_t val)$/;"	f	file:
cachetgcrt_unpackverify_val_cb	cachetgcrt.c	/^cachetgcrt_unpackverify_val_cb(cache_val_t val, int copy)$/;"	f	file:
cacrt	SSL_layer.h	/^    X509 *cacrt; \/\/ store the cacrt for all server ssl connection$/;"	m	struct:ssl_channel
cakey	SSL_layer.h	/^    EVP_PKEY *cakey; \/\/ store the ca key$/;"	m	struct:ssl_channel
cert	cert.h	/^typedef struct cert {$/;"	s
cert_free	cert.c	/^cert_free(cert_t *c)$/;"	f
cert_new	cert.c	/^cert_new(void)$/;"	f
cert_new3	cert.c	/^cert_new3(EVP_PKEY *key, X509 *crt, STACK_OF(X509) *chain)$/;"	f
cert_new3_copy	cert.c	/^cert_new3_copy(EVP_PKEY *key, X509 *crt, STACK_OF(X509) *chain)$/;"	f
cert_new_load	cert.c	/^cert_new_load(const char *filename)$/;"	f
cert_pkey_st	ssl.c	/^struct cert_pkey_st {$/;"	s	file:
cert_refcount_inc	cert.c	/^cert_refcount_inc(cert_t *c)$/;"	f
cert_set_chain	cert.c	/^cert_set_chain(cert_t *c, STACK_OF(X509) *chain)$/;"	f
cert_set_crt	cert.c	/^cert_set_crt(cert_t *c, X509 *crt)$/;"	f
cert_set_key	cert.c	/^cert_set_key(cert_t *c, EVP_PKEY *key)$/;"	f
cert_st	ssl.c	/^struct cert_st {$/;"	s	file:
cert_t	cert.h	/^} cert_t;$/;"	t	typeref:struct:cert
chain	SSL_layer.h	/^    STACK_OF(X509) *chain;\/\/ store the ca chain.$/;"	m	struct:ssl_channel
chain	cert.h	/^	STACK_OF(X509) * chain;$/;"	m	struct:cert
cli_bev	TCP_layer.h	/^    struct bufferevent *cli_bev;$/;"	m	struct:pxy_conn	typeref:struct:pxy_conn::bufferevent
cli_readcb	TCP_layer.c	/^cli_readcb(struct bufferevent *bev, void *ptr){$/;"	f
cli_ssl	SSL_layer.h	/^    SSL *cli_ssl;$/;"	m	struct:proxy
client_handshake_done	SSL_layer.h	/^    bool client_handshake_done;$/;"	m	struct:proxy
client_hello_buf	SSL_layer.h	/^    unsigned char client_hello_buf[1024];$/;"	m	struct:proxy
conns	SSL_layer.h	/^    int conns;$/;"	m	struct:ssl_channel
conns	TCP_layer.c	/^int conns = 0;$/;"	v
conns	TCP_layer.h	/^    struct pxy_conn * conns[MAXCONNS];$/;"	m	struct:proxy_ctx	typeref:struct:proxy_ctx::pxy_conn
copydata	TCP_layer.c	/^copydata(evutil_socket_t fd, short what, void* ptr){$/;"	f
create_channel_ctx	SSL_layer.c	/^create_channel_ctx(const char *certf, const char *keyf) {$/;"	f
create_proxy_server_ssl	SSL_layer.c	/^create_proxy_server_ssl(struct proxy *proxy) {$/;"	f
crt	cert.h	/^	X509 *crt;$/;"	m	struct:cert
ctx	SSL_layer.h	/^    struct ssl_channel *ctx;$/;"	m	struct:proxy	typeref:struct:proxy::ssl_channel
dbg_mode	log.c	/^static int dbg_mode = LOG_DBG_MODE_NONE;$/;"	v	file:
del_cb	cache.h	/^	cache_del_cb_t del_cb;$/;"	m	struct:cache
dh1024_p	ssl.c	/^static unsigned char dh1024_p[] = {$/;"	v	file:
dh2048_p	ssl.c	/^static unsigned char dh2048_p[] = {$/;"	v	file:
dh4096_p	ssl.c	/^static unsigned char dh4096_p[] = {$/;"	v	file:
dh512_p	ssl.c	/^static unsigned char dh512_p[] = {$/;"	v	file:
dh_g	ssl.c	/^static unsigned char dh_g[] = { 0x02 };$/;"	v	file:
down	shm_and_sem.h	/^    sem_t *down;$/;"	m	struct:shm_ctx_t
down_pointer	SSL_layer.h	/^    unsigned char *down_pointer;$/;"	m	struct:proxy
dstsock	TCP_layer.h	/^    struct sockaddr_storage dstsock;$/;"	m	struct:pxy_conn	typeref:struct:pxy_conn::sockaddr_storage
dstsocklen	TCP_layer.h	/^    socklen_t dstsocklen;$/;"	m	struct:pxy_conn
dynbuf	dynbuf.h	/^typedef struct dynbuf {$/;"	s
dynbuf_free	dynbuf.c	/^dynbuf_free(dynbuf_t *db)$/;"	f
dynbuf_new	dynbuf.c	/^dynbuf_new(unsigned char *buf, size_t sz)$/;"	f
dynbuf_new_alloc	dynbuf.c	/^dynbuf_new_alloc(size_t sz)$/;"	f
dynbuf_new_copy	dynbuf.c	/^dynbuf_new_copy(const unsigned char *buf, const size_t sz)$/;"	f
dynbuf_new_file	dynbuf.c	/^dynbuf_new_file(const char *filename)$/;"	f
dynbuf_t	dynbuf.h	/^} dynbuf_t;$/;"	t	typeref:struct:dynbuf
end_cb	cache.h	/^	cache_end_cb_t end_cb;$/;"	m	struct:cache
err_mode	log.c	/^static int err_mode = LOG_ERR_MODE_STDERR;$/;"	v	file:
eventcb	TCP_layer.c	/^eventcb(struct bufferevent *bev, short events, void *ptr){$/;"	f
exist_cb	cache.h	/^	cache_exist_cb_t exist_cb;$/;"	m	struct:cache
fini_cb	cache.h	/^	cache_fini_cb_t fini_cb;$/;"	m	struct:cache
forward_record	SSL_layer.c	/^forward_record(SSL *from, SSL *to, struct proxy *proxy) {$/;"	f
free_key_cb	cache.h	/^	cache_free_key_cb_t free_key_cb;$/;"	m	struct:cache
free_val_cb	cache.h	/^	cache_free_val_cb_t free_val_cb;$/;"	m	struct:cache
get_cb	cache.h	/^	cache_get_cb_t get_cb;$/;"	m	struct:cache
get_key_cb	cache.h	/^	cache_get_key_cb_t get_key_cb;$/;"	m	struct:cache
get_val_cb	cache.h	/^	cache_get_val_cb_t get_val_cb;$/;"	m	struct:cache
hello_msg_length	SSL_layer.h	/^    ssize_t hello_msg_length;$/;"	m	struct:proxy
index	SSL_layer.h	/^    int index;$/;"	m	struct:proxy
index	TCP_layer.h	/^    int index;$/;"	m	struct:pxy_conn
init_shm	shm_and_sem.h	/^int init_shm(struct shm_ctx_t *shm_ctx){$/;"	f
init_ssl_bio	SSL_layer.c	/^init_ssl_bio(SSL *ssl){$/;"	f
kcalloc	khash.h	172;"	d
key	SSL_layer.h	/^    EVP_PKEY *key; \/\/ store the public key for all fake certificate.$/;"	m	struct:ssl_channel
key	cert.h	/^	EVP_PKEY *key;$/;"	m	struct:cert
key	ssl.c	/^	struct cert_pkey_st *key;$/;"	m	struct:cert_st	typeref:struct:cert_st::cert_pkey_st	file:
key_down	shm_and_sem.h	/^key_t key_down = 1001;$/;"	v
key_up	shm_and_sem.h	/^key_t key_up = 1000;$/;"	v
kfree	khash.h	181;"	d
kh_begin	khash.h	520;"	d
kh_clear	khash.h	445;"	d
kh_cstr_t	khash.h	/^typedef const char *kh_cstr_t;$/;"	t
kh_del	khash.h	483;"	d
kh_destroy	khash.h	438;"	d
kh_dynbuf_hash_equal	cachedsess.c	64;"	d	file:
kh_dynbuf_hash_equal	cachessess.c	62;"	d	file:
kh_dynbuf_hash_func	cachedsess.c	/^kh_dynbuf_hash_func(dynbuf_t *b)$/;"	f	file:
kh_dynbuf_hash_func	cachessess.c	/^kh_dynbuf_hash_func(dynbuf_t *b)$/;"	f	file:
kh_end	khash.h	527;"	d
kh_exist	khash.h	491;"	d
kh_foreach	khash.h	550;"	d
kh_foreach_value	khash.h	564;"	d
kh_get	khash.h	475;"	d
kh_init	khash.h	431;"	d
kh_inline	khash.h	148;"	d
kh_inline	khash.h	150;"	d
kh_int64_hash_equal	khash.h	381;"	d
kh_int64_hash_func	khash.h	377;"	d
kh_int_hash_equal	khash.h	371;"	d
kh_int_hash_func	khash.h	367;"	d
kh_int_hash_func2	khash.h	414;"	d
kh_key	khash.h	499;"	d
kh_n_buckets	khash.h	541;"	d
kh_put	khash.h	466;"	d
kh_resize	khash.h	453;"	d
kh_size	khash.h	534;"	d
kh_str_hash_equal	khash.h	402;"	d
kh_str_hash_func	khash.h	398;"	d
kh_val	khash.h	508;"	d
kh_value	khash.h	513;"	d
kh_x509fpr_hash_equal	cachefkcrt.c	53;"	d	file:
kh_x509fpr_hash_func	cachefkcrt.c	/^kh_x509fpr_hash_func(void *b)$/;"	f	file:
khash_t	khash.h	424;"	d
khint32_t	khash.h	/^typedef unsigned int khint32_t;$/;"	t
khint32_t	khash.h	/^typedef unsigned long khint32_t;$/;"	t
khint64_t	khash.h	/^typedef unsigned long khint64_t;$/;"	t
khint64_t	khash.h	/^typedef unsigned long long khint64_t;$/;"	t
khint_t	khash.h	/^typedef khint32_t khint_t;$/;"	t
khiter_t	khash.h	/^typedef khint_t khiter_t;$/;"	t
kmalloc	khash.h	175;"	d
krealloc	khash.h	178;"	d
kroundup32	khash.h	168;"	d
likely	attrib.h	65;"	d
likely	attrib.h	68;"	d
log_dbg_mode	log.c	/^log_dbg_mode(int mode)$/;"	f
log_dbg_print_free	log.c	/^log_dbg_print_free(char *s)$/;"	f
log_dbg_printf	log.c	/^log_dbg_printf(const char *fmt, ...)$/;"	f
log_dbg_write_free	log.c	/^log_dbg_write_free(void *buf, size_t sz)$/;"	f
log_err_mode	log.c	/^log_err_mode(int mode)$/;"	f
log_err_printf	log.c	/^log_err_printf(const char *fmt, ...)$/;"	f
log_err_writecb	log.c	/^log_err_writecb(UNUSED void *fh, const void *buf, size_t sz)$/;"	f	file:
main	SSL_layer.c	/^int main ()$/;"	f
main	TCP_layer.c	/^int main(void)$/;"	f
msec	shm_and_sem.h	/^struct timeval msec = {0, 100};$/;"	v	typeref:struct:timeval
msgs_need_to_out	SSL_layer.h	/^    int msgs_need_to_out;$/;"	m	struct:proxy
mutex	cache.h	/^	pthread_mutex_t mutex;$/;"	m	struct:cache
mutex	cert.h	/^	pthread_mutex_t mutex;$/;"	m	struct:cert
mutex	ssl.c	/^	pthread_mutex_t mutex;$/;"	m	struct:CRYPTO_dynlock_value	file:
nat_netfilter_lookup	TCP_layer.c	/^nat_netfilter_lookup(struct sockaddr *dst_addr, socklen_t *dst_addrlen,$/;"	f
notify_tcp	SSL_layer.c	/^notify_tcp() {$/;"	f
peek_hello_msg	SSL_layer.c	/^peek_hello_msg(struct proxy *proxy, unsigned char *msg) {$/;"	f
proxies	SSL_layer.h	/^    struct proxy * proxies[MAXCONNS];$/;"	m	struct:ssl_channel	typeref:struct:ssl_channel::proxy
proxy	SSL_layer.h	/^struct proxy {$/;"	s
proxy_ctx	TCP_layer.h	/^struct proxy_ctx {$/;"	s
proxy_ctx_free	TCP_layer.c	/^proxy_ctx_free(struct pxy_conn *ctx){$/;"	f
proxy_new	SSL_layer.c	/^proxy_new(struct ssl_channel *ctx) {$/;"	f
proxy_shutdown_free	SSL_layer.c	/^proxy_shutdown_free(struct proxy *proxy) {$/;"	f
put_cb	cache.h	/^	cache_put_cb_t put_cb;$/;"	m	struct:cache
pxy_conn	TCP_layer.h	/^struct pxy_conn {$/;"	s
pxy_ossl_sessget_cb	SSL_layer.c	/^pxy_ossl_sessget_cb(UNUSED SSL *ssl, unsigned char *id, int idlen, int *copy)$/;"	f	file:
pxy_ossl_sessnew_cb	SSL_layer.c	/^pxy_ossl_sessnew_cb(MAYBE_UNUSED SSL *ssl, SSL_SESSION *sess)$/;"	f	file:
pxy_ossl_sessremove_cb	SSL_layer.c	/^pxy_ossl_sessremove_cb(UNUSED SSL_CTX *sslctx, SSL_SESSION *sess)$/;"	f	file:
pxy_srcsslctx_create	SSL_layer.c	/^pxy_srcsslctx_create(struct proxy *ctx, X509 *crt, STACK_OF(X509) *chain,$/;"	f	file:
readcb	TCP_layer.c	/^readcb(struct bufferevent *bev, void *ptr, int server) {$/;"	f
receive_up	SSL_layer.c	/^receive_up(SSL* ssl, unsigned char *shm) {$/;"	f
references	cert.h	/^	size_t references;$/;"	m	struct:cert
send_down	SSL_layer.c	/^send_down(struct proxy *proxy, int server) {$/;"	f
serv_bev	TCP_layer.h	/^    struct bufferevent *serv_bev;$/;"	m	struct:pxy_conn	typeref:struct:pxy_conn::bufferevent
serv_readcb	TCP_layer.c	/^serv_readcb(struct bufferevent *bev, void *ptr){$/;"	f
serv_ssl	SSL_layer.h	/^    SSL *serv_ssl;$/;"	m	struct:proxy
server_handshake_done	SSL_layer.h	/^    bool server_handshake_done;$/;"	m	struct:proxy
set_val_cb	cache.h	/^	cache_set_val_cb_t set_val_cb;$/;"	m	struct:cache
setup_proxy_server_ssl	SSL_layer.c	/^setup_proxy_server_ssl(struct proxy *proxy) {$/;"	f
shm_ctx	SSL_layer.h	/^    struct shm_ctx_t *shm_ctx;$/;"	m	struct:ssl_channel	typeref:struct:ssl_channel::shm_ctx_t
shm_ctx	TCP_layer.h	/^    struct shm_ctx_t *shm_ctx;$/;"	m	struct:proxy_ctx	typeref:struct:proxy_ctx::shm_ctx_t
shm_ctx	TCP_layer.h	/^    struct shm_ctx_t *shm_ctx;$/;"	m	struct:pxy_conn	typeref:struct:pxy_conn::shm_ctx_t
shm_ctx_t	shm_and_sem.h	/^struct shm_ctx_t {$/;"	s
shm_down	shm_and_sem.h	/^    unsigned char *shm_down;$/;"	m	struct:shm_ctx_t
shm_up	shm_and_sem.h	/^    unsigned char *shm_up;$/;"	m	struct:shm_ctx_t
shmid_down	shm_and_sem.h	/^    int shmid_down;$/;"	m	struct:shm_ctx_t
shmid_up	shm_and_sem.h	/^    int shmid_up;$/;"	m	struct:shm_ctx_t
sni	SSL_layer.h	/^    char * sni;$/;"	m	struct:proxy
ssl_channel	SSL_layer.h	/^struct ssl_channel {$/;"	s
ssl_dh_load	ssl.c	/^ssl_dh_load(const char *filename)$/;"	f
ssl_dh_refcount_inc	ssl.c	/^ssl_dh_refcount_inc(DH *dh)$/;"	f
ssl_dnsname_match	ssl.c	/^ssl_dnsname_match(const char *certname, size_t certnamesz,$/;"	f
ssl_ec_by_name	ssl.c	/^ssl_ec_by_name(const char *curvename)$/;"	f
ssl_fini	ssl.c	/^ssl_fini(void)$/;"	f
ssl_ia5string_strdup	ssl.c	/^ssl_ia5string_strdup(ASN1_IA5STRING *ia5)$/;"	f	file:
ssl_init	ssl.c	/^ssl_init(void)$/;"	f
ssl_initialized	ssl.c	/^static int ssl_initialized = 0;$/;"	v	file:
ssl_is_ocspreq	ssl.c	/^ssl_is_ocspreq(const unsigned char *buf, size_t sz)$/;"	f
ssl_key_genrsa	ssl.c	/^ssl_key_genrsa(const int keysize)$/;"	f
ssl_key_load	ssl.c	/^ssl_key_load(const char *filename)$/;"	f
ssl_key_refcount_inc	ssl.c	/^ssl_key_refcount_inc(EVP_PKEY *key)$/;"	f
ssl_mutex	ssl.c	/^static pthread_mutex_t *ssl_mutex;$/;"	v	file:
ssl_mutex_num	ssl.c	/^static int ssl_mutex_num;$/;"	v	file:
ssl_openssl_version	ssl.c	/^ssl_openssl_version(void)$/;"	f
ssl_rand	ssl.c	/^ssl_rand(void *p, size_t sz)$/;"	f
ssl_reinit	ssl.c	/^ssl_reinit(void)$/;"	f
ssl_session_is_valid	ssl.c	/^ssl_session_is_valid(SSL_SESSION *sess)$/;"	f
ssl_session_to_str	ssl.c	/^ssl_session_to_str(SSL_SESSION *sess)$/;"	f
ssl_ssl_cert_get	ssl.c	/^ssl_ssl_cert_get(SSL *s)$/;"	f
ssl_ssl_state_to_str	ssl.c	/^ssl_ssl_state_to_str(SSL *ssl)$/;"	f
ssl_thr_dyn_create_cb	ssl.c	/^ssl_thr_dyn_create_cb(UNUSED const char *file, UNUSED int line)$/;"	f	file:
ssl_thr_dyn_destroy_cb	ssl.c	/^ssl_thr_dyn_destroy_cb(struct CRYPTO_dynlock_value *dl,$/;"	f	file:
ssl_thr_dyn_lock_cb	ssl.c	/^ssl_thr_dyn_lock_cb(int mode, struct CRYPTO_dynlock_value *dl,$/;"	f	file:
ssl_thr_id_cb	ssl.c	/^ssl_thr_id_cb(CRYPTO_THREADID *id)$/;"	f	file:
ssl_thr_id_cb	ssl.c	/^ssl_thr_id_cb(void) {$/;"	f	file:
ssl_thr_locking_cb	ssl.c	/^ssl_thr_locking_cb(int mode, int type, UNUSED const char *file,$/;"	f	file:
ssl_tls_clienthello_parse_sni	ssl.c	/^ssl_tls_clienthello_parse_sni(const unsigned char *buf, ssize_t *sz)$/;"	f
ssl_tmp_dh_callback	ssl.c	/^ssl_tmp_dh_callback(UNUSED SSL *s, int is_export, int keylength)$/;"	f
ssl_wildcardify	ssl.c	/^ssl_wildcardify(const char *hostname)$/;"	f
ssl_x509_aias	ssl.c	/^ssl_x509_aias(X509 *crt, const int type)$/;"	f
ssl_x509_fingerprint_sha1	ssl.c	/^ssl_x509_fingerprint_sha1(X509 *crt, unsigned char *fpr)$/;"	f
ssl_x509_forge	ssl.c	/^ssl_x509_forge(X509 *cacrt, EVP_PKEY *cakey, X509 *origcrt,$/;"	f
ssl_x509_is_valid	ssl.c	/^ssl_x509_is_valid(X509 *crt)$/;"	f
ssl_x509_load	ssl.c	/^ssl_x509_load(const char *filename)$/;"	f
ssl_x509_names	ssl.c	/^ssl_x509_names(X509 *crt)$/;"	f
ssl_x509_names_match	ssl.c	/^ssl_x509_names_match(X509 *crt, const char *dnsname)$/;"	f
ssl_x509_names_to_str	ssl.c	/^ssl_x509_names_to_str(X509 *crt)$/;"	f
ssl_x509_ocsps	ssl.c	/^ssl_x509_ocsps(X509 *crt)$/;"	f
ssl_x509_refcount_inc	ssl.c	/^ssl_x509_refcount_inc(X509 *crt)$/;"	f
ssl_x509_serial_copyrand	ssl.c	/^ssl_x509_serial_copyrand(X509 *dstcrt, X509 *srccrt)$/;"	f
ssl_x509_subject	ssl.c	/^ssl_x509_subject(X509 *crt)$/;"	f
ssl_x509_subject_cn	ssl.c	/^ssl_x509_subject_cn(X509 *crt, size_t *psz)$/;"	f
ssl_x509_to_pem	ssl.c	/^ssl_x509_to_pem(X509 *crt)$/;"	f
ssl_x509_to_str	ssl.c	/^ssl_x509_to_str(X509 *crt)$/;"	f
ssl_x509_v3ext_add	ssl.c	/^ssl_x509_v3ext_add(X509V3_CTX *ctx, X509 *crt, char *k, char *v)$/;"	f
ssl_x509_v3ext_copy_by_nid	ssl.c	/^ssl_x509_v3ext_copy_by_nid(X509 *crt, X509 *origcrt, int nid)$/;"	f
ssl_x509chain_load	ssl.c	/^ssl_x509chain_load(X509 **crt, STACK_OF(X509) **chain, const char *filename)$/;"	f
ssl_x509chain_use	ssl.c	/^ssl_x509chain_use(SSL_CTX *sslctx, X509 *crt, STACK_OF(X509) *chain)$/;"	f
sz	dynbuf.h	/^	size_t sz;$/;"	m	struct:dynbuf
timer	TCP_layer.h	/^    struct event *timer;$/;"	m	struct:proxy_ctx	typeref:struct:proxy_ctx::event
timer	TCP_layer.h	/^    struct event *timer;$/;"	m	struct:pxy_conn	typeref:struct:pxy_conn::event
unlikely	attrib.h	66;"	d
unlikely	attrib.h	69;"	d
unpackverify_val_cb	cache.h	/^	cache_unpackverify_val_cb_t unpackverify_val_cb;$/;"	m	struct:cache
up	shm_and_sem.h	/^    sem_t *up;$/;"	m	struct:shm_ctx_t
write_lock	shm_and_sem.h	/^    sem_t *write_lock;$/;"	m	struct:shm_ctx_t
writecb	TCP_layer.c	/^writecb(struct bufferevent *bev, void *ptr) {$/;"	f
x509	ssl.c	/^	X509 *x509;$/;"	m	struct:cert_pkey_st	file:
